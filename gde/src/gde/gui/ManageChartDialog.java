package gde.gui;

import gde.gui.tablemodels.ChartTableModel;
import gde.gui.util.DatabaseHandler;
import gde.models.Chart;
import gde.models.Chart.ChartType;
import gde.models.Field;
import gde.models.Game;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import org.bson.types.ObjectId;
import org.jongo.Jongo;
import org.jongo.MongoCollection;

public class ManageChartDialog extends javax.swing.JDialog {

    private static final Jongo database = DatabaseHandler.getDatabase();
    private final Game game;
    private final JTable chartTable;
    private final boolean isCreated;

    public ManageChartDialog(Game game, JTable chartTable, boolean isCreated) {
        initComponents();
        this.game = game;
        this.chartTable = chartTable;
        this.isCreated = isCreated;

        MongoCollection fieldsCollection = database.getCollection("fields");
        String query = String.format("{gameId: '%s'}", game.getKey().toString());
        Iterable<Field> fields = fieldsCollection.find(query).as(Field.class);
        for (Field field : fields) {
            horizontalAxisComboBox.addItem(field);
            verticalAxisComboBox.addItem(field);
        }
        for (Chart.ChartType fieldType : Chart.ChartType.values()) {
            chartTypeComboBox.addItem(fieldType);
        }

        if (isCreated) {
            ChartTableModel chartTableModel = ((ChartTableModel) chartTable.getModel());
            Chart chart = chartTableModel.getEntryAt(chartTable.getSelectedRow());
            Field xAxisField = fieldsCollection.findOne(new ObjectId(chart.getxAxisFieldId())).as(Field.class);
            Field yAxisField = fieldsCollection.findOne(new ObjectId(chart.getyAxisFieldId())).as(Field.class);
            titleTextField.setText(chart.getTitle());
            horizontalAxisComboBox.setSelectedItem(xAxisField);
            verticalAxisComboBox.setSelectedItem(yAxisField);
            chartTypeComboBox.setSelectedItem(chart.getChartType());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        horizontalAxisLabel = new javax.swing.JLabel();
        horizontalAxisComboBox = new javax.swing.JComboBox();
        verticalAxisComboBox = new javax.swing.JComboBox();
        chartTypeComboBox = new javax.swing.JComboBox();
        chartTypeLabel = new javax.swing.JLabel();
        verticalAxisLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        titleTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        horizontalAxisLabel.setText("Horizontal Axis");

        chartTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chartTypeComboBoxInputStateChanged(evt);
            }
        });

        chartTypeLabel.setText("Chart Type");

        verticalAxisLabel.setText("Vertical Axis");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        titleLabel.setText("Title");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(159, 159, 159)
                        .add(saveButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(horizontalAxisLabel)
                            .add(titleLabel)
                            .add(verticalAxisLabel)
                            .add(chartTypeLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, verticalAxisComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, horizontalAxisComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(chartTypeComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, titleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 222, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titleLabel)
                    .add(titleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(horizontalAxisComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(horizontalAxisLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(verticalAxisComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(verticalAxisLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(chartTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chartTypeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(saveButton)
                    .add(cancelButton))
                .add(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chartTypeComboBoxInputStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chartTypeComboBoxInputStateChanged
        verticalAxisComboBox.setEnabled(chartTypeComboBox.getSelectedItem() != ChartType.PIE);
    }//GEN-LAST:event_chartTypeComboBoxInputStateChanged

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        this.setVisible(false);

        Field horizontalAxis = ((Field) horizontalAxisComboBox.getSelectedItem());
        Field verticalAxis = ((Field) verticalAxisComboBox.getSelectedItem());
        String title = titleTextField.getText().isEmpty()
                ? verticalAxis.getName() + " vs. " + horizontalAxis.getName()
                : titleTextField.getText();
        Chart newChart = new Chart(
                title,
                horizontalAxis.getKey().toString(),
                verticalAxis.getKey().toString(),
                (ChartType) chartTypeComboBox.getSelectedItem(),
                game.getKey().toString());

        ChartTableModel chartTableModel = ((ChartTableModel) chartTable.getModel());
        if (isCreated) {
            int rowId = chartTable.getSelectedRow();
            Chart oldChart = chartTableModel.getEntryAt(rowId);
            MongoCollection fieldsCollection = database.getCollection("fields");
            Field oldHorizontalAxis = fieldsCollection.findOne(new ObjectId(oldChart.getxAxisFieldId())).as(Field.class);
            Field oldVerticalAxis = fieldsCollection.findOne(new ObjectId(oldChart.getyAxisFieldId())).as(Field.class);
            if (newChart.getTitle().equals(verticalAxis.getName() + " vs. " + horizontalAxis.getName())) {
                if (oldChart.getTitle().equals(String.format("%s vs. %s", oldVerticalAxis.getName(), oldHorizontalAxis.getName()))) {
                    newChart.setTitle(String.format("%s vs. %s", verticalAxis.getName(), horizontalAxis.getName()));
                }
            }
            chartTableModel.update(newChart, rowId);
        } else {
            chartTableModel.add(newChart);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (isCreated) {
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want cancel your changes?", "Confirm Cancellation",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                this.setVisible(false);
            }
        } else {
            this.setVisible(false);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox chartTypeComboBox;
    private javax.swing.JLabel chartTypeLabel;
    private javax.swing.JComboBox horizontalAxisComboBox;
    private javax.swing.JLabel horizontalAxisLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField titleTextField;
    private javax.swing.JComboBox verticalAxisComboBox;
    private javax.swing.JLabel verticalAxisLabel;
    // End of variables declaration//GEN-END:variables
}
